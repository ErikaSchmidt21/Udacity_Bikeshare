import time
import numpy as np
import pandas as pd
import datetime
CITY_DATA = {'Chicago': 'chicago.csv', 'New York City': 'new_york_city.csv', 'Washington': 'washington.csv'}

def get_filters():
    city = ""
    day_of_week = ""
    month = ""
    print('Hello! Let\'s explore some US bikeshare data!')
    while True:
        city = input("Would you like to see data for Chicago, New York City or Washington ").title()
        if city in ["Chicago", "New York City", "Washington"]:
            break
        else:
            print("Please try again.")

    while True:
        filter = input('Would you like to filter the data by month day, both, or not at all? Type "none" for no  filter ').title()
        if filter == "None":
            month = "all"
            day_of_week = "all"
            break
        elif filter == "Month":
            month = input("Which month? January, February, March, April, May, June? ").title()
            day_of_week = "all"
            if month in ["January", "February", "March", "April", "May", "June"]:
                break
        elif filter == "Day":
            day_of_week = (input("Which day? ")).title()
            month = "all"
            if day_of_week in ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday','Sunday']:
                break
        elif filter == "Both":
            month = input("Which month? January, February, March, April, May, June? ").title()
            if month not in ["January", "February", "March", "April", "May", "June"]:
                continue
            day_of_week = (input("Which day?"))
            if day_of_week not in ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday','Sunday']:
                continue
            else:
                break
        else:
            print("Please try again")
            continue
        break

    print('-' * 40)
    return city, month, day_of_week
def load_data(city,month,day_of_week):
    pd.set_option('display.max_columns',None)
    df = pd.read_csv(CITY_DATA[city])
    df['Start Time'] = pd.to_datetime(df['Start Time'])
    df['End Time'] = pd.to_datetime(df['End Time'])
    df['month'] = df['Start Time'].dt.month_name()
    df['hour'] = df['Start Time'].dt.hour
    df['day_of_week'] = df['Start Time'].dt.day_name()
    if month == 'all' and day_of_week !='all':
        return df.loc[df['day_of_week'] ==day_of_week ]
    elif day_of_week == 'all' and month !='all':
        return df.loc[df['month'] ==month ]
    elif day_of_week !='all' and month !='all':
        return df.loc[(df['month'] ==month) & (df['day_of_week']==day_of_week)]
    else:
        return df
def time_stats(df):
    print('\nCalculating The Most Frequent Times of Travel...\n')
    start_time = time.time()
    month = df['month'].mode()[0]
    day = df['day_of_week'].mode()[0]
    popular_hour = df['hour'].mode()[0]
    print('Most common month: {}\nMost common day: {}\nMost common start hour: {}'.format(month,day,popular_hour))
    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)
def station_stats(df):
    print('\nCalculating The Most Popular Stations and Trip...\n')
    start_time = time.time()
    popular_start_station = df['Start Station'].mode()[0]
    popular_end_station = df['End Station'].mode()[0]
    popular_start_and_end = (df['Start Station']+df['End Station']).mode()[0]
    print('Most common start station: {}\nMost common end station: {}\nMost common start and end station: {}.'.format(popular_start_station, popular_end_station, popular_start_and_end))
    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)
def trip_duration_stats(df):
    print('\nCalculating Trip Duration...\n')
    start_time = time.time()
    df['Trip Time'] = df['End Time'] - df['Start Time']
    total_time = df['Trip Time'].sum()
    mean_time = df['Trip Time'].mean()
    print('The total travel time: {}, \nThe mean travel time: {},'.format(total_time,mean_time))
    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)
def user_stats(df):
    """Displays statistics on bikeshare users."""
    print('\nCalculating User Stats...\n')
    start_time = time.time()
    print(df.groupby(['User Type']).size().reset_index(name ='counts'))
    if 'Gender' in df:
        print()
        print(df.groupby(['Gender']).size().reset_index(name='counts'))
        print()
    if 'Birth Year' in df:
        earliest = df['Birth Year'].min()
        most_recent =df['Birth Year'].max()
        common = df['Birth Year'].mode().iloc[0]
        print('The earliest birth year was {}.\nThe most recent birth year was {}.\nThe most common birth year was {}.'.format(earliest,most_recent,common))
        print("\nThis took %s seconds." % (time.time() - start_time))
        print('-'*40)

def main():
    while True:
        city, month, day = get_filters()
        df = load_data(city, month, day)
        time_stats(df)
        station_stats(df)
        trip_duration_stats(df)
        user_stats(df)

        restart = input('\nWould you like to restart? Enter yes or no. ')
        if restart.lower() != 'yes':
            break

print(main())
